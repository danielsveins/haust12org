* Haskel 2
ég hélt að það væri til haskel.org einhverstaðar þ.s. heitir þetta haskel2
** Real World Haskell
núverandi staður: bls. 32 - 72 of 712
*** kafli 1
[1..] gefur endl. lista

adding elemnt to list:
let list1 = [1,2,3]
1 : list1
[1,1,2,3]

**** Strings & Chars

putStrLn "Here is a new line --> \n <-- see?"

Here is a new line -->
<-- see?


--putStrLn  is a function that prints a string

-- this is a comment thingy that is the "--"


--Strings are merely lists of characters in haskell

ghci> let a = ['l', 'o', 't', 's', ' ', 'o', 'f', ' ', 'w', 'o', 'r', 'k']
ghci> a
"lots of work"
ghci> a == "lots of work"
True
The empty string is written ""S, and is a synonym for []:
ghci> "" == []
True
Since a string is a list of characters, we can use the regular list operators to construct
new strings:
ghci> 'a':"bc"
"abc"
ghci> "foo" ++ "bar"
"foobar"

**** Types

:set +t lets us see the types of it in the cmd prompt.

--type names must start with an uppercase letter and variable names with a lowercase letter

-- "it" is a very special variable that tells us the output of the last expression evaluated.

x :: y means "the expression x has the type y"

--[Char] is the same as string meaning list of characters

--staða nú er bls. 13, 53 af 712
--staða nú er bls. 21
 
tuples are made with ("somthing", 1450, "somthing else") for example

fst is a function that gives the first element of a tuple
snd the second

these are defined only for pairs

*** Listvinsla

spannar circa bls. 76 til 99, til 107 í bókinni

**** listvinslu toolbox - functions that are ubiquitous in Haskel 

---length

length []
0 

length [1,2,4]
5

...


---null

null []
True

null "Plough"
False

---head

head[1,2,3]
1


---tail

tail[1,2,3]
[2,3]

---last

last[1,2,3]
3
last "bar"
'r'

---init

init "bar"
"ar"

...

--- ++  (the appending function)
[2,3]++[4,5]
[2,3,4,5]


--- concat  (makes a list out of a list of lists)

concat [[1,2],[3,4]]
[1,2,3,4]
-(removes one level of nesting)
---reverse (returns elements of a list in reverse order)
reverse [1,2,3]
[3,2,1]

---and

and [True,False,True]
 False

and []
True

---or

or [True,False,True]
True

or []
False

--- all   and any

(Takes boolean function and aplies to list)

all odd [3,5,7]
True
all odd []
True
any odd [2,4,6,8]
False
any odd []
False

--- drop n list

let list = [1,2,3]

drop 1 list
[2,3]


--- take n list

take 2 list
[1,2]

--- splitAt n list

Prelude> splitAt 2 [1,2,3,4]
([1,2],[3,4])

--- takeWhile (predicate) [l,i,s,t]
(takes fromthe list while the predicate evaluates to true)

Prelude> takeWhile (< 1000) [x^2|x<-[1..]]
[1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625,676,729,784,841,900,961]
Prelude> 

--- dropWhile 
(like takeWhile but drops, and thus returns a list)

--- elem 

elem 1 [1,2,3]
True

--- notElem

notElem 22 primes
skilar endaleysu ...

--- filter

filter (predicate) "list"
(returns a list of elements fullfilling the predicate)

Prelude> filter (== 1) [1,22,3,1,55,1,7,77]
[1,1,1]
Prelude> filter (== 'r') "bergur"
"rr"
Prelude> 


--- zipWith 
( takes two lists and applies a function to each pair of elements, 
generating a list that is the same length as the shorter of the two:)


Prelude> take 100 (zipWith3 (\x y z -> x + y + z) [1..] [1..] [1..])
[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273,276,279,282,285,288,291,294,297,300]
-(hér notuðum við anonymous þrendarfall , þ.e.a.s. fall sem tekur 3 intök og skilar einni)


***** Primes

 
Prelude> let isPrime (prime:plist) num = if prime*prime > num then True else if (mod num prime)==0 then False else isPrime plist num

Prelude> let primes = 2:3:[p|p<-[5,7..],isPrime (tail primes) p]

með þessu falli og straum er hægt að fá prímtölu straum, og ákvörðunarfall, en þau styðja hver við annað.

pyth- er pythagorasar threndir, straumur pythaogorasarThrenda thar sem allir meðlimir eru frumtölur, ef að einhverjar þrendir 
eru í þessum straum, er

Prelude> let pythprimes2 = [(x,y,z) | z <- primes, x <- [1..z], y <- [x..z], x^2+y^2 == z^2 &&  isPrime primes x && isPrime primes  y]

- Ég keyrði þetta og fékk, ekkert út allavega framan af, þ.a. það gæti verið ákveðinn (Thesa) að það séu engar slíkar 
þrendir til.  -> spursmál er hvort hægt er að sanna þetta ?. ....

Trivial að sanna .. z er nauðsynlega samsett tala...

pyth þrendir m. 2 primes held ég..
let pythprimes3 = [(x,y,z) | z <- primes, x <- [1..z], y <- [x..z], x^2+y^2 == z^2 && ( isPrime primes x || isPrime primes  y)]


pythprimes4 gerie bara skilyrdi ad eitt sje prim

Prelude> take 80 (pythprimes4)
[(3,4,5),(5,12,13),(8,15,17),(7,24,25),(20,21,29),(12,35,37),(9,40,41),(28,45,53),(11,60,61),(48,55,73),(13,84,85),(39,80,89),(65,72,97),(20,99,101),(60,91,109),(15,112,113),(88,105,137),(17,144,145),(51,140,149),(85,132,157),(52,165,173),(19,180,181),(95,168,193),(28,195,197),(60,221,229),(105,208,233),(120,209,241),(32,255,257),(23,264,265),(69,260,269),(115,252,277),(160,231,281),(68,285,293),(25,312,313),(75,308,317),(175,288,337),(180,299,349),(225,272,353),(252,275,373),(189,340,389),(228,325,397),(40,399,401),(120,391,409),(29,420,421),(145,408,433),(280,351,449),(168,425,457),(261,380,461),(31,480,481),(220,459,509),(279,440,521),(341,420,541),(165,532,557),(231,520,569),(48,575,577),(368,465,593),(240,551,601),(35,612,613),(105,608,617),(200,609,641),(315,572,653),(300,589,661),(385,552,673),(52,675,677),(37,684,685),(260,651,701),(259,660,709),(108,725,733),(468,595,757),(39,760,761),(481,600,769),(195,748,773),(555,572,797),(280,759,809),(429,700,821),(540,629,829),(41,840,841),(205,828,853),(232,825,857),(348,805,877)]
Prelude> 



***** working with sublists



***** converting char -> Int or String -> Int
Prelude> (read [(head "123")] :: Int) + 1
2
it :: Int



***** head in a smart way

let mysmarExmp xs = if not (null xs) then head xs else 'Z'




*** more stuff

IO monad is in chapter 7
ghci operates in this

readFile 

Prelude> :type readFile
readFile :: FilePath -> IO String

In Haskell, indentation is important, it continues an existing definition instead of starting
a new one.

stdr bls. 32

gott er að nota Cntrl-c þegar ghci er í endaleysu, en þá viðhelst ghci sessionið og bindingar
vs. Cntrl-z þá hættir ghci og bindingarnar tapast..

** Vikublað 11
Formleg skilgreining á listarithættinum í haskel
http://haskell.org/onlinereport/exps.html


list of list of ints 
too:[[]]
with Int inside 



*** Lausnir

1. hópverkefni

Prelude> foldr (+) 0 [x^2|x<-[1..100]]
338350
og
Prelude> foldr (*) 1 [x^2+1|x<-[1..100]]
31700841114....osfv.


2. Einstaklings

minor victory...
--
Prelude> let sf n = foldr (+) 0 [x^2|x<-n]
Prelude> sf [1,2,3]
14
--


let marglist n = foldr (*) 1 n
let sumlist n = foldr (+) 0 n


let a = [1,2,3]
let b = [1,2]
let c =[1,3]
let e =[a,b,c]

let marglist n = foldr (*) 1 n
let sumr n = marglist (head n) + sumr (tail n)

sumr e


let fall x = foldl (+) 0 (map marglist x)

Prelude> fall e
11
Prelude>


--kennari benti á winghci.
 


** Vikublað 12

Fallið putStrLn er af tagi String -> IO ()
og fallið getLine er af taginu IO String.

sendum gildið af IO String í gegnum (>>=), sem sendir
strenginn í næsta skref...



*** Lausn

3. Einstaklingsverkefni.  Smíðið og prófið lista allra Taylor-stuðla fallsins
e^x


próf:

Prelude> :load Taylor.hs 
[1 of 1] Compiling Taylor           ( Taylor.hs, interpreted )
Ok, modules loaded: Taylor.
*Taylor> (take 10 taylorExp)
Loading package array-0.3.0.0 ... linking ... done.
Loading package filepath-1.1.0.3 ... linking ... done.
Loading package old-locale-1.0.0.2 ... linking ... done.
Loading package old-time-1.0.0.3 ... linking ... done.
Loading package unix-2.4.0.0 ... linking ... done.
Loading package directory-1.0.1.0 ... linking ... done.
Loading package process-1.0.1.2 ... linking ... done.
Loading package time-1.1.4 ... linking ... done.
Loading package random-1.0.0.2 ... linking ... done.
Loading package haskell98 ... linking ... done.
[1.0,1.0,0.5,0.16666666666666666,4.1666666666666664e-2,8.333333333333333e-3,1.388888888888889e-3,1.984126984126984e-4,2.48015873015873e-5,2.7557319223985893e-6]
*Taylor> 







4. Hópverkefni

foldl

Description:  it takes the  second argument and the first item of the list and appæies the function to them, then feeds
the function with this result and the second argument and so on.

myFoldl f z [] = z
myFoldl f z (x:xs) = myFoldl f (f z x) xs


Prófun:

Prelude> :load myFoldl.hs 
[1 of 1] Compiling Main             ( myFoldl.hs, interpreted )
Ok, modules loaded: Main.
*Main> myFoldl (+) 0 [1,2,3]
6
*Main> 

5. hópverkefni

foldr

Description: it takes the second argument and the last item on the list and applies the function, then takes the penultamate
item from the end and the result, and so on

myFoldr f z [] = z
myFoldr f z (x:xs) = f x (myFoldr f z xs)

Prelude> :load myFoldr.hs 
[1 of 1] Compiling Main             ( myFoldr.hs, interpreted )
Ok, modules loaded: Main.
*Main> myFoldr (+) 0 [1,2,3]
6
*Main> 



7. Ekki skilaverkefni


newtype Mu a = Mu (Mu a -> a)
y f = (\h -> h $ Mu h) (\x -> f . (\(Mu g) -> g) x $ x)


Prelude> :load Y.hs 
[1 of 1] Compiling Main             ( Y.hs, interpreted )
Ok, modules loaded: Main.
*Main> let fact n = let almost_fact f n = if n==0 then 1 else n * f(n-1) in (y almost_fact) n
*Main> take 10 (map fact [1..])
[1,2,6,24,120,720,5040,40320,362880,3628800]
*Main> 


tilaga að 8.

let fib n = let fibi f n = if n==0 then 1 else n + f(n-1) in (y fibi) n
tilaga 2
*Main> let fib n = let fibi f n = if n==0 then 1 else if n==1 then 1 else f(n-1) + f(n-2) in (y fibi) n 
 

8. Einstaklingsverkefni

Y-Combinator

Y= lambda f.(lambda x.f(x x))(lambda x.f(x x))

Prelude> :load Y.hs 
[1 of 1] Compiling Main             ( Y.hs, interpreted )
Ok, modules loaded: Main.
*Main> let fib n = let fibi f n = if n==0 then 1 else if n==1 then 1 else f(n-1) + f(n-2) in (y fibi) n 
*Main> fib 3
3
*Main> fib 4
5
*Main> fib 6
13
*Main> fib 5
8
*Main> 

** haskell hardway
http://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/
lítur frekar vel út



** Compileing Haskell

$ ghc -o filename file.hs


$ ./filename



** Y-combinator
http://noeit.wordpress.com/2009/04/28/how-i-finally-understood-the-y-combinator-and-blew-my-damn-mind/
