* Daematimi eda fyrl

** Alloy kodi

abstract sig Madur {children: some Madur}
sig Karl extends Madur {eiginkona: lone Kona}
sig Kona extends Madur {eiginmadur: lone Karl}
fact {some Karl}
fact {all x: Karl | (all y: Kona | x.eiginkona = y <=> y.eiginmadur = x)}
run {} for 6


Ax(AyE(x,y)<->E(y,x))
svona eiginl jafngilt fyrri run yrdingu ad ofan

..
x.eiginkona = y
{m1,m2,...} = {y}

Alloy samsamar y og mengid {y}

*** auka vidbaetur vid ofan

abstract sig Madur {children: some Madur}
sig Karl extends Madur {eiginkona: lone Kona}
sig Kona extends Madur {eiginmadur: lone Karl}
// fun mother[n:Madur]: Kona {n.~children}
// fact notcyclic {no x: Madur | x in x.*children} // virkar ekki af einkv astaedum
fact notcyclic {no x: Madur | x in x.^children}
fact onemother {all x: Kona | (all y Kona | (all z Madur | z in x.children and z in y.children => x =y))}
fact onefather {all x: Karl | (all y Karl | (all z Madur | z in x.children and z in y.children => x =y))}
fact {some Karl}
fact {all x: Karl | (all y: Kona | x.eiginkona = y <=> y.eiginmadur = x)}
run {} for 6



*** annad daemi

module bintree5
sig Node {left, right: lone Node}
one sig Root extends Node {}
fun parent[n:Node]: Node {n.~(left+right)}

fact all_below_root     {all n: Node | n in Root.*(left+right)}
fact not_cyclic         {no n : Node | n in n.^(left+right)}
fact left_right_different {no n: Node | some n.left ^ n.right}
fact all_one_parent      {all n: Node | lone parent[n]}


*** fleiri daemi


V19  Skolem stytting 'a

ExAy (L(x) -> B(x,y)) ^ AxL(x) => Ay Ex B(x,y)
Motdaemi ef:
1^2^~3

| skref        | forml                       |
|--------------+-----------------------------|
| 1 Utrym ->   | ExAy(~LxVBxy)^AxLx^~AyExBxy |
| 2 faera ~ in | ExAy(~LxVBxy^AxLx^EyAx~Bxy  |
| 3 utryma E   | Ay(~LaVBay^AxLx^Ax~Bxb      |
| 4 utryma A   | ~L(a)VBay^Lz^~Bxb           |


rokstytt
~La[1,3 a/x,b/y, 5 T [2,4 a/z]
