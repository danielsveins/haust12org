* Alloy 



** Template

module nafn
-- skjolun
open nafn
.
.
.
sig nafn ... {skilgr svida}
.
.
.
lykilord nafn ... {skilgreining}
.
.
.

Reyndar ma sleppa module-linunni og&eda open-linunum og
sig-skilgreiningar mega koma inn a milli klausa.

open svarar til import i java

//
/*

*/

og 
--

 er allt mogul comment adferdir

** General Meaning of stuff

lone: means there is 0 or 1

** MIT tuttorial
http://alloy.mit.edu/alloy4/tutorial4/

http://alloy.mit.edu/alloy4/tutorial4/frame-FS-1.html

*** file system 1

// A file system object
sig FSObject { parent: lone Dir }

// A directory in the file system.
sig Dir extends FSObject { contents: set FSObject }

// A file in the file system.
sig File extends FSObject { }

// A directory is the parent of its contents.
fact { all d: Dir, o: d.contents | o.parent = d }

// All file system objects are either file or directories.
fact { File + Dir = FSObject }

// There exists a root.
one sig Root extends Dir { } { no parent }

// File system is connected.
fact { FSObject in Root.*cintents }

// The contents path is acyclic
assert acyclic { no d: Dir | d in d.^contents }

//File system has one root.
assert oneRoot { one d: Dir | no d.parent }

// Every fd object is in at most one directory
assert oneLocation { all o: FSObject | lone d: Dir | o in d.contents }


** Alloy pakki

*** Profun yrdingar

**** daemi 1

// Ey((Ax Px) -> Py)

sig A {}
fact {some A}
sig PM in A {}
pred P[x:A] {x in PM}
pred fi {some y:A | (all x:A | P[x]) => P[y]}



**** Lausn vid V26c 8 vikbl
sig A {}
fact {some A}
sig PM in A {}
one sig M {BM: A -> A}
pred P[x:A] {x in PM}
pred B[x:A,y:A] {x->y in M.BM}
pred fi {some x:A | all y:A | (P[x] => B[x,y]) && (all x:A | P[x]) => (all y:A | some x:A | B[x,y])}

run fi
